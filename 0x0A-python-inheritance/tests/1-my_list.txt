::::::::::::
Funcion
::::::::::::

Importacion del modulo:
::::::::::::::::::::::::::::::::::::

>>> MyList = __import__('1-my_list').MyList

:::::::::::::::::::::::::::::::::::: 

Pruebas:
:::::::::::::

1 - Agragando elementos a la lista

>>> pepe = MyList()
>>> pepe.append(1)
>>> pepe.append(10)
>>> pepe.append(2)
>>> pepe.append(4)

>>> print(pepe)
[1, 10, 2, 4]

>>> pepe.print_sorted()
[1, 2, 4, 10]

>>> print(pepe)
[1, 10, 2, 4]

2- Se prueba la lista vacia.

>>> pepe = MyList()

>>> print(pepe)
[]

>>> pepe.print_sorted()
[]

3 - se prueba una lista negativa.

>>> pepe = MyList()

>>> pepe.append(0)

>>> pepe.append(-1)

>>> pepe.append(-672)

>>> pepe.append(-2)

>>> print(pepe)
[0, -1, -672, -2]

>>> pepe.print_sorted()
[-672, -2, -1, 0]

>>> print(pepe)
[0, -1, -672, -2]

4 - Verificamos si mandamos NULL

>>> pepe = MyList()

>>> pepe.append(NULL)
Traceback (most recent call last):
...
NameError: name 'NULL' is not defined

5 - Verificamos si mandamos NaN

>>> pepe = MyList()

>>> pepe.append(NaN)
Traceback (most recent call last):
...
NameError: name 'NaN' is not defined

6 - Verificamos si mandamos None

>>> pepe = MyList()

>>> pepe.append(None)

>>> print(pepe)
[None]

>>> pepe.print_sorted()
[None]

7 - verificamos que pasa si madamos chars

>>> pepe = MyList(["p", "e", "p", "e"])

>>> print(pepe)
['p', 'e', 'p', 'e']

>>> pepe.print_sorted()
['e', 'e', 'p', 'p']

>>> print(pepe)
['p', 'e', 'p', 'e']

8 - verificamos que pasa si madamos una cadena

>>> pepe = MyList(["pepe"])

>>> print(pepe)
['pepe']

>>> pepe.print_sorted()
['pepe']

>>> print(pepe)
['pepe']

9 - Verificamos que pasa su mandamos floats

>>> pepe = MyList([88.6, 2.02, 3.06, 1.01])

>>> print(pepe)
[88.6, 2.02, 3.06, 1.01]

>>> pepe.print_sorted()
[1.01, 2.02, 3.06, 88.6]

>>> print(pepe)
[88.6, 2.02, 3.06, 1.01]

10 - Verificamos que pasa si mandamos enteros con chars

>>> pepe = MyList([88, "z"])

>>> print(pepe)
[88, 'z']

>>> pepe.print_sorted()
Traceback (most recent call last):
...
TypeError: '<' not supported between instances of 'str' and 'int'

>>> print(pepe)
[88, 'z']

11 - Verificamos que pasa si mandamos un tipo de dato diferente

>>> pepe = MyList(45)
Traceback (most recent call last):
...
TypeError: 'int' object is not iterable

12 - Verificamos que pasa si mandamos un tipo de dato diferente

>>> pepe = MyList(True)
Traceback (most recent call last):
...
TypeError: 'bool' object is not iterable
